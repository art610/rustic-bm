#!/bin/bash

export LANG=C.UTF-8

# --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–£–¢–ï–ô ---
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="$SCRIPT_DIR/config.json"
INSTALLERS_DIR="$SCRIPT_DIR/installers"
CREDENTIALS_DIR="$SCRIPT_DIR/.credentials"

# --- –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô ---
check_dependencies() {
    local missing_deps=()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º jq –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
    if ! command -v jq >/dev/null 2>&1; then
        missing_deps+=("jq")
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º envsubst
    if ! command -v envsubst >/dev/null 2>&1; then
        missing_deps+=("gettext-base")
    fi

    if [ ${#missing_deps[@]} -gt 0 ]; then
        echo "–û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missing_deps[*]}"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: sudo apt install ${missing_deps[*]}"
        exit 1
    fi
}

# --- –§–£–ù–ö–¶–ò–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---
create_default_config() {
    cat > "$CONFIG_FILE" << 'EOF'
{
  "backup": {
    "source_dirs": [
      "$HOME/.config"
    ],
    "primary_repo": "local",
    "state_dir": "$HOME/.backup_states",
    "log_file": "$HOME/backup_manager.log"
  },
  "repositories": {
    "local": {
      "type": "local",
      "enabled": true,
      "path": "$HOME/rustic-backup",
      "description": "–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"
    }
  },
  "multi_repo": {
    "enabled": false,
    "sync_all": true,
    "repositories": ["local"],
    "require_all_success": false,
    "parallel_uploads": false
  },
  "schedule": {
    "enabled": true,
    "preset": "daily_twice",
    "custom_calendar": "",
    "randomized_delay_sec": 900,
    "only_on_ac_power": true,
    "persistent": true,
    "wake_system": false,
    "presets": {
      "hourly": "hourly",
      "every_6h": "*-*-* 00,06,12,18:00:00",
      "daily_morning": "*-*-* 02:00:00",
      "daily_twice": "*-*-* 02,14:00:00",
      "workdays_only": "Mon..Fri *-*-* 02:00:00",
      "business_hours": "Mon..Fri *-*-* 09,11,13,15,17:00:00",
      "weekly": "Mon *-*-* 03:00:00",
      "monthly": "*-*-01 02:00:00"
    }
  },
  "exclude": {
    "patterns": [
      "*.tmp",
      "*.log",
      "*.cache",
      "*.pyc",
      "*.swp",
      "*~",
      "*.bak",
      "*.backup"
    ],
    "directories": [
      ".cache",
      "node_modules",
      ".git/objects",
      "target",
      "__pycache__",
      ".vscode",
      ".idea",
      ".venv",
      "venv",
      "env",
      ".env",
      "build",
      "dist",
      ".next",
      "coverage"
    ],
    "files": [
      ".DS_Store",
      "Thumbs.db",
      "desktop.ini",
      ".gitkeep"
    ]
  },
  "retention": {
    "keep_daily": 7,
    "keep_weekly": 4,
    "keep_monthly": 6,
    "keep_yearly": 2
  },
  "safety": {
    "min_total_dir_size_kb": 2,
    "enable_size_check": true,
    "enable_checksum_verification": true
  },
  "rustic": {
    "compression": "3",
    "encryption": "repokey"
  },
  "notifications": {
    "enable_desktop_notifications": true,
    "email_notifications": false,
    "email_address": ""
  }
}
EOF
    echo "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $CONFIG_FILE"
    echo "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º."
}

load_config() {
    if [ ! -f "$CONFIG_FILE" ]; then
        echo "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é..."
        create_default_config
        exit 0
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON
    if ! jq empty "$CONFIG_FILE" 2>/dev/null; then
        echo "–û–®–ò–ë–ö–ê: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $CONFIG_FILE"
        exit 1
    fi

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    CONFIG_JSON=$(envsubst < "$CONFIG_FILE")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    mapfile -t SOURCE_DIRS < <(echo "$CONFIG_JSON" | jq -r '.backup.source_dirs[]')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å repositories –∏–ª–∏ —Å—Ç–∞—Ä—É—é —Å repo_path
    if echo "$CONFIG_JSON" | jq -e '.repositories' >/dev/null 2>&1; then
        # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º primary_repo
        PRIMARY_REPO=$(echo "$CONFIG_JSON" | jq -r '.backup.primary_repo // "local"')
        RUSTIC_REPO=$(get_repo_url "$PRIMARY_REPO" "$CONFIG_JSON")
    else
        # –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º repo_path
        RUSTIC_REPO=$(echo "$CONFIG_JSON" | jq -r '.backup.repo_path')
    fi

    STATE_DIR=$(echo "$CONFIG_JSON" | jq -r '.backup.state_dir')
    LOG_FILE=$(echo "$CONFIG_JSON" | jq -r '.backup.log_file')

    KEEP_DAILY=$(echo "$CONFIG_JSON" | jq -r '.retention.keep_daily')
    KEEP_WEEKLY=$(echo "$CONFIG_JSON" | jq -r '.retention.keep_weekly')
    KEEP_MONTHLY=$(echo "$CONFIG_JSON" | jq -r '.retention.keep_monthly')
    KEEP_YEARLY=$(echo "$CONFIG_JSON" | jq -r '.retention.keep_yearly')

    MIN_TOTAL_DIR_SIZE_KB=$(echo "$CONFIG_JSON" | jq -r '.safety.min_total_dir_size_kb')
    ENABLE_SIZE_CHECK=$(echo "$CONFIG_JSON" | jq -r '.safety.enable_size_check')
    ENABLE_CHECKSUM_VERIFICATION=$(echo "$CONFIG_JSON" | jq -r '.safety.enable_checksum_verification')

    RUSTIC_COMPRESSION=$(echo "$CONFIG_JSON" | jq -r '.rustic.compression')
    RUSTIC_ENCRYPTION=$(echo "$CONFIG_JSON" | jq -r '.rustic.encryption // "repokey"')

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º "auto" –≤ —Ä–µ–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è
    if [ "$RUSTIC_COMPRESSION" = "auto" ]; then
        RUSTIC_COMPRESSION="3"  # –£—Ä–æ–≤–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Å–∂–∞—Ç–∏—è)
    fi

    PARALLEL_UPLOADS=$(echo "$CONFIG_JSON" | jq -r '.multi_repo.parallel_uploads // false')

    ENABLE_DESKTOP_NOTIFICATIONS=$(echo "$CONFIG_JSON" | jq -r '.notifications.enable_desktop_notifications')

}

validate_config() {
    local errors=0

    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for dir in "${SOURCE_DIRS[@]}"; do
        if [ ! -d "$dir" ]; then
            echo "‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $dir"
            errors=$((errors + 1))
        fi
    done

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    local repo_parent=$(dirname "$RUSTIC_REPO")
    if [ ! -d "$repo_parent" ]; then
        echo "‚ö†Ô∏è  –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: $repo_parent"
        errors=$((errors + 1))
    fi

    local state_parent=$(dirname "$STATE_DIR")
    if [ ! -d "$state_parent" ]; then
        echo "‚ö†Ô∏è  –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: $state_parent"
        errors=$((errors + 1))
    fi

    local log_parent=$(dirname "$LOG_FILE")
    if [ ! -d "$log_parent" ]; then
        echo "‚ö†Ô∏è  –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: $log_parent"
        errors=$((errors + 1))
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if ! [[ "$KEEP_DAILY" =~ ^[0-9]+$ ]] || [ "$KEEP_DAILY" -lt 1 ]; then
        echo "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ keep_daily: $KEEP_DAILY"
        errors=$((errors + 1))
    fi

    if [ $errors -gt 0 ]; then
        echo "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ $errors –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        return 1
    else
        echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
        return 0
    fi
}

generate_exclude_file() {
    local exclude_file="$SCRIPT_DIR/.rusticignore"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    if [ "${DISABLE_EXCLUSIONS:-false}" = "true" ]; then
        log_message "DEBUG: –ò—Å–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã (DISABLE_EXCLUSIONS=true)"
        > "$exclude_file"  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
        echo "$exclude_file"
        return
    fi

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ .gitignore
    > "$exclude_file"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    echo "$CONFIG_JSON" | jq -r '.exclude.patterns[]' | while read -r pattern; do
        if [ -n "$pattern" ]; then
            echo "$pattern" >> "$exclude_file"
            log_message "DEBUG: –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –∏—Å–∫–ª—é—á–µ–Ω–∏—è: $pattern"
        fi
    done

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    echo "$CONFIG_JSON" | jq -r '.exclude.directories[]' | while read -r dir; do
        if [ -n "$dir" ]; then
            echo "$dir/" >> "$exclude_file"
            log_message "DEBUG: –ò—Å–∫–ª—é—á–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $dir/"
        fi
    done

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
    echo "$CONFIG_JSON" | jq -r '.exclude.files[]' | while read -r file; do
        if [ -n "$file" ]; then
            echo "$file" >> "$exclude_file"
            log_message "DEBUG: –ò—Å–∫–ª—é—á–µ–Ω —Ñ–∞–π–ª: $file"
        fi
    done

    log_message "DEBUG: –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–π: $exclude_file"
    log_message "DEBUG: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π:"
    cat "$exclude_file" | while read -r line; do
        log_message "  $line"
    done

    echo "$exclude_file"
}

show_config_summary() {
    echo "=== –¢–ï–ö–£–©–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==="
    echo "–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${#SOURCE_DIRS[@]} —à—Ç—É–∫"
    for dir in "${SOURCE_DIRS[@]}"; do
        if [ -d "$dir" ]; then
            local size=$(du -sh "$dir" 2>/dev/null | cut -f1 || echo "?")
            echo "  ‚úì $dir ($size)"
        else
            echo "  ‚úó $dir (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞)"
        fi
    done
    echo "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $RUSTIC_REPO"
    if [ -d "$RUSTIC_REPO" ]; then
        local repo_size=$(du -sh "$RUSTIC_REPO" 2>/dev/null | cut -f1 || echo "?")
        echo "  –†–∞–∑–º–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: $repo_size"
    fi
    echo "–•—Ä–∞–Ω–µ–Ω–∏–µ: $KEEP_DAILY –¥–Ω–µ–π, $KEEP_WEEKLY –Ω–µ–¥–µ–ª—å, $KEEP_MONTHLY –º–µ—Å—è—Ü–µ–≤, $KEEP_YEARLY –ª–µ—Ç"
    echo "–°–∂–∞—Ç–∏–µ: $RUSTIC_COMPRESSION"
    echo "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: $RUSTIC_ENCRYPTION"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º—É–ª—å—Ç–∏-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    if echo "$CONFIG_JSON" | jq -e '.repositories' >/dev/null 2>&1; then
        echo "–ú—É–ª—å—Ç–∏-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $MULTI_REPO_ENABLED"
        if [ "$MULTI_REPO_ENABLED" = "true" ]; then
            echo "  –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏: $PARALLEL_UPLOADS"
            echo "  –¢—Ä–µ–±–æ–≤–∞—Ç—å —É—Å–ø–µ—Ö –≤—Å–µ—Ö: $REQUIRE_ALL_SUCCESS"
        fi
    fi
    echo "================================"
}

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø–ú–ò ---

# –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è


get_repo_url() {
    local repo_name="$1"
    local config_json="$2"

    local repo_type=$(echo "$config_json" | jq -r ".repositories.$repo_name.type")

    case "$repo_type" in
        "local")
            local path=$(echo "$config_json" | jq -r ".repositories.$repo_name.path")
            echo "$path"
            ;;

        "sftp")
            local host=$(echo "$config_json" | jq -r ".repositories.$repo_name.host")
            local port=$(echo "$config_json" | jq -r ".repositories.$repo_name.port // 22")
            local username=$(echo "$config_json" | jq -r ".repositories.$repo_name.username")
            local path=$(echo "$config_json" | jq -r ".repositories.$repo_name.path")
            echo "sftp:$username@$host:$port$path"
            ;;
        *)
            echo ""
            return 1
            ;;
    esac
}

setup_repo_credentials() {
    local repo_name="$1"
    local config_json="$2"

    local repo_type=$(echo "$config_json" | jq -r ".repositories.$repo_name.type")

    case "$repo_type" in
        "sftp")
            local ssh_key=$(echo "$config_json" | jq -r ".repositories.$repo_name.ssh_key // \"\"")

            if [ -n "$ssh_key" ] && [ "$ssh_key" != "null" ] && [ -f "$ssh_key" ]; then
                export RUSTIC_SFTP_COMMAND="ssh -i $ssh_key -o StrictHostKeyChecking=no"
            fi
            ;;
    esac
}



get_password_file() {
    local repo_name="$1"

    mkdir -p "$CREDENTIALS_DIR"
    chmod 700 "$CREDENTIALS_DIR"

    local password_file="$CREDENTIALS_DIR/${repo_name}.password"

    if [ ! -f "$password_file" ]; then
        openssl rand -base64 32 > "$password_file"
        chmod 600 "$password_file"
        log_message "–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è '$repo_name': $password_file"
    fi

    echo "$password_file"
}

test_repo_connection() {
    local repo_name="$1"
    local config_json="$2"

    local repo_enabled=$(echo "$config_json" | jq -r ".repositories.$repo_name.enabled")
    if [ "$repo_enabled" != "true" ]; then
        return 1
    fi

    local repo_url=$(get_repo_url "$repo_name" "$config_json")
    if [ -z "$repo_url" ]; then
        return 1
    fi

    local password_file=$(get_password_file "$repo_name")
    setup_repo_credentials "$repo_name" "$config_json"

    if rustic snapshots --repository "$repo_url" --password-file "$password_file" >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

init_repository() {
    local repo_name="$1"
    local config_json="$2"

    local repo_url=$(get_repo_url "$repo_name" "$config_json")
    local password_file=$(get_password_file "$repo_name")

    setup_repo_credentials "$repo_name" "$config_json"

    log_message "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è '$repo_name'..."
    log_message "DEBUG: Repository URL: $repo_url"

    if rustic init \
        --repository "$repo_url" \
        --password-file "$password_file" \
        2>&1 | tee -a "$LOG_FILE"; then
        log_message "‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π '$repo_name' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        return 0
    else
        log_message "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è '$repo_name'"
    fi

    return 1
}

backup_to_repository() {
    local repo_name="$1"
    local config_json="$2"
    local changed_dirs=("${@:3}")

    if [ ${#changed_dirs[@]} -eq 0 ]; then
        return 0
    fi

    local repo_url=$(get_repo_url "$repo_name" "$config_json")
    local password_file=$(get_password_file "$repo_name")
    local timestamp=$(date +'%Y%m%d_%H%M%S')

    setup_repo_credentials "$repo_name" "$config_json"

    log_message "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π '$repo_name' –¥–ª—è ${#changed_dirs[@]} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    if ! rustic snapshots --repository "$repo_url" --password-file "$password_file" >/dev/null 2>&1; then
        if ! init_repository "$repo_name" "$config_json"; then
            return 1
        fi
    fi

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    log_message "DEBUG: –ù–∞—á–∏–Ω–∞–µ–º –±—ç–∫–∞–ø –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: ${changed_dirs[*]}"
    local exclude_file=$(generate_exclude_file)
    log_message "DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–π: $exclude_file"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω–æ –≤ –±—ç–∫–∞–ø
    log_message "DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö:"
    for dir in "${changed_dirs[@]}"; do
        local file_count=$(find "$dir" -type f 2>/dev/null | wc -l)
        local total_size=$(du -sh "$dir" 2>/dev/null | cut -f1)
        log_message "  $dir: $file_count —Ñ–∞–π–ª–æ–≤, —Ä–∞–∑–º–µ—Ä: $total_size"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤
        log_message "  –ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤:"
        find "$dir" -type f 2>/dev/null | head -5 | while read -r file; do
            log_message "    - $file"
        done
    done

    # –í—ã–ø–æ–ª–Ω—è–µ–º –±—ç–∫–∞–ø
    if rustic backup "${changed_dirs[@]}" \
            --repository "$repo_url" \
            --password-file "$password_file" \
            --tag "auto-$timestamp" \
            --tag "repo-$repo_name" \
            --custom-ignorefile "$exclude_file" \
            --set-compression "$RUSTIC_COMPRESSION"; then

            log_message "‚úÖ –ë—ç–∫–∞–ø –≤ '$repo_name' —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω"

            # –†–æ—Ç–∞—Ü–∏—è
            log_message "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–æ—Ç–∞—Ü–∏–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ '$repo_name'..."
            rustic forget \
                --repository "$repo_url" \
                --password-file "$password_file" \
                --keep-daily "$KEEP_DAILY" \
                --keep-weekly "$KEEP_WEEKLY" \
                --keep-monthly "$KEEP_MONTHLY" \
                --keep-yearly "$KEEP_YEARLY" \
                --prune

            return 0
        else
            log_message "‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π '$repo_name'"
            return 1
        fi
    fi
}

show_schedule_info() {
    echo ""
    echo "=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –†–ê–°–ü–ò–°–ê–ù–ò–ò ==="
    echo "–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–∫–ª—é—á–µ–Ω: $SCHEDULE_ENABLED"
    echo "–¢–µ–∫—É—â–∏–π –ø—Ä–µ—Å–µ—Ç: $SCHEDULE_PRESET"

    if echo "$CONFIG_JSON" | jq -e '.schedule.presets' >/dev/null 2>&1; then
        local schedule_value=$(echo "$CONFIG_JSON" | jq -r ".schedule.presets.$SCHEDULE_PRESET // \"–Ω–µ –Ω–∞–π–¥–µ–Ω\"")
        echo "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: $schedule_value"
    fi

    echo ""
    echo "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
    echo "  ./setup_systemd.sh schedule"
}

get_enabled_repositories() {
    local config_json="$1"
    if echo "$config_json" | jq -e '.repositories' >/dev/null 2>&1; then
        echo "$config_json" | jq -r '.repositories | to_entries[] | select(.value.enabled == true) | .key'
    fi
}

get_primary_repository() {
    local config_json="$1"
    echo "$config_json" | jq -r '.backup.primary_repo // "local"'
}

show_repositories_status() {
    echo ""
    log_message "=== –°–¢–ê–¢–£–° –†–ï–ü–û–ó–ò–¢–û–†–ò–ï–í ==="

    local config_json=$(envsubst < "$CONFIG_FILE")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ repositories
    if ! echo "$config_json" | jq -e '.repositories' >/dev/null 2>&1; then
        echo "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (repo_path)"
        echo "–û–±–Ω–æ–≤–∏—Ç–µ config.json –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"
        return
    fi

    local primary_repo=$(get_primary_repository "$config_json")

    echo "$config_json" | jq -r '.repositories | to_entries[] | "\(.key)|\(.value.type)|\(.value.enabled)|\(.value.description // "")"' | \
    while IFS='|' read -r name type enabled description; do
        local status_icon="‚ùå"
        local primary_mark=""

        if [ "$enabled" = "true" ]; then
            if test_repo_connection "$name" "$config_json" >/dev/null 2>&1; then
                status_icon="‚úÖ"
            else
                status_icon="‚ö†Ô∏è"
            fi
        fi

        if [ "$name" = "$primary_repo" ]; then
            primary_mark=" [–û–°–ù–û–í–ù–û–ô]"
        fi

        echo "  $status_icon $name ($type)$primary_mark - $description"
    done
}

# --- –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
show_backup_info() {
    if [ ! -d "$RUSTIC_REPO" ]; then
        echo "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω"
        return
    fi

    echo ""
    echo "=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–≠–ö–ê–ü–ê–• ==="

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º password file
    local password_file
    if echo "$CONFIG_JSON" | jq -e '.repositories' >/dev/null 2>&1; then
        # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        local primary_repo=$(get_primary_repository "$CONFIG_JSON")
        password_file=$(get_password_file "$primary_repo")
    else
        # –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        password_file="$SCRIPT_DIR/.password"
    fi

    if command -v rustic >/dev/null 2>&1 && [ -f "$password_file" ]; then
        echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–Ω–∞–ø—à–æ—Ç—ã:"
        rustic snapshots --repository "$RUSTIC_REPO" --password-file "$password_file" | tail -10

        echo ""
        echo "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:"
        rustic repoinfo --repository "$RUSTIC_REPO" --password-file "$password_file"
    else
        echo "Rustic –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–æ–ª—å"
    fi
}

interactive_restore() {
    if [ ! -d "$RUSTIC_REPO" ]; then
        echo "‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: $RUSTIC_REPO"
        return 1
    fi

    if ! command -v rustic >/dev/null 2>&1; then
        echo "‚ùå Rustic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 1
    fi

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º password file
    local password_file
    if echo "$CONFIG_JSON" | jq -e '.repositories' >/dev/null 2>&1; then
        # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        local primary_repo=$(get_primary_repository "$CONFIG_JSON")
        password_file=$(get_password_file "$primary_repo")
    else
        # –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        password_file="$SCRIPT_DIR/.password"
    fi

    if [ ! -f "$password_file" ]; then
        echo "‚ùå –§–∞–π–ª –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω: $password_file"
        return 1
    fi

    echo ""
    echo "=== –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ò–ó –ë–≠–ö–ê–ü–ê ==="

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–∞–ø—à–æ—Ç—ã
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–Ω–∞–ø—à–æ—Ç—ã:"
    rustic snapshots --repository "$RUSTIC_REPO" --password-file "$password_file"

    echo ""
    read -p "ID —Å–Ω–∞–ø—à–æ—Ç–∞ (–∏–ª–∏ 'latest' –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ): " snapshot_id

    # –ï—Å–ª–∏ snapshot_id –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º latest
    if [ -z "$snapshot_id" ]; then
        snapshot_id="latest"
    fi

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–Ω–∞–ø—à–æ—Ç–∞
    echo ""
    echo "üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–Ω–∞–ø—à–æ—Ç–∞ '$snapshot_id':"
    echo "----------------------------------------"
    if rustic ls -l --repository "$RUSTIC_REPO" --password-file "$password_file" "$snapshot_id" 2>/dev/null; then
        echo "----------------------------------------"
    else
        echo "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–Ω–∞–ø—à–æ—Ç–∞"
    fi

    echo ""
    echo "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –≤–Ω—É—Ç—Ä–∏ —Å–Ω–∞–ø—à–æ—Ç–∞ –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è"
    echo "   –ù–∞–ø—Ä–∏–º–µ—Ä: $snapshot_id:/home/user/.config"
    echo ""
    read -p "–ü—É—Ç—å –≤ —Å–Ω–∞–ø—à–æ—Ç–µ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–≥–æ) []: " snapshot_path

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å —Å–Ω–∞–ø—à–æ—Ç–∞
    local full_snapshot_path="$snapshot_id"
    if [ -n "$snapshot_path" ]; then
        # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π —Å–ª—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å
        snapshot_path="${snapshot_path#/}"
        full_snapshot_path="$snapshot_id:/$snapshot_path"
    fi

    read -p "–ü—É—Ç—å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è [./restored]: " restore_path

    if [ -z "$restore_path" ]; then
        restore_path="./restored"
    fi

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    mkdir -p "$restore_path"

    echo ""
    echo "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ '$full_snapshot_path' –≤ '$restore_path'..."
    echo ""

    if rustic restore \
        --repository "$RUSTIC_REPO" \
        --password-file "$password_file" \
        "$full_snapshot_path" "$restore_path"; then

        echo ""
        echo "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
        echo "üìÅ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤: $(realpath "$restore_path")"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—ã–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        echo ""
        echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:"
        echo "----------------------------------------"
        local file_count=$(find "$restore_path" -type f 2>/dev/null | wc -l)
        local dir_count=$(find "$restore_path" -type d 2>/dev/null | wc -l)
        local total_size=$(du -sh "$restore_path" 2>/dev/null | cut -f1)

        echo "  –§–∞–π–ª–æ–≤: $file_count"
        echo "  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: $dir_count"
        echo "  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: $total_size"
        echo ""

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        echo "üìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:"
        echo "----------------------------------------"
        if command -v tree >/dev/null 2>&1; then
            tree -L 3 "$restore_path" | head -20
        else
            ls -la "$restore_path" | head -20
        fi

        if [ $file_count -eq 0 ]; then
            echo ""
            echo "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏!"
            echo "   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:"
            echo "   1. –°–Ω–∞–ø—à–æ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
            echo "   2. –§–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≥–ª—É–±–∂–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
            echo "   3. –£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å –≤ —Å–Ω–∞–ø—à–æ—Ç–µ"
            echo ""
            echo "   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:"
            echo "   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: find '$restore_path' -type f"
            echo "   - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å –¥—Ä—É–≥–∏–º –ø—É—Ç–µ–º –≤ —Å–Ω–∞–ø—à–æ—Ç–µ"
        fi
    else
        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏!"
        return 1
    fi
}

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø–ú–ò ---
manage_repositories() {
    while true; do
        echo ""
        echo "=========================================="
        echo "      –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø–ú–ò"
        echo "=========================================="
        echo "1) –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"
        echo "2) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
        echo "3) –í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
        echo "0) –ù–∞–∑–∞–¥"
        echo "=========================================="

        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-4): " choice

        case $choice in
            1) show_repositories_status ;;
            2) test_all_repositories ;;
            3) toggle_repository ;;
            0) return ;;
            *) echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä" ;;
        esac

        echo ""
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
    done
}

test_all_repositories() {
    echo ""
    echo "=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –†–ï–ü–û–ó–ò–¢–û–†–ò–ï–í ==="

    local config_json=$(envsubst < "$CONFIG_FILE")

    if echo "$config_json" | jq -e '.repositories' >/dev/null 2>&1; then
        echo "$config_json" | jq -r '.repositories | keys[]' | while read -r repo_name; do
            if test_repo_connection "$repo_name" "$config_json" >/dev/null 2>&1; then
                echo "  ‚úÖ $repo_name"
            else
                echo "  ‚ùå $repo_name"
            fi
        done
    else
        echo "–°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
    fi
}



toggle_repository() {
    echo "–§—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏"
}

# --- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
log_message() {
    local message="$1"
    echo "$(date +'%Y-%m-%d %H:%M:%S') - $message" | tee -a "$LOG_FILE"

    # –î–µ—Å–∫—Ç–æ–ø–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if [ "$ENABLE_DESKTOP_NOTIFICATIONS" = "true" ] && command -v notify-send >/dev/null 2>&1; then
        if [[ "$message" == *"–û–®–ò–ë–ö–ê"* ]] || [[ "$message" == *"ERROR"* ]]; then
            notify-send "Backup Manager" "‚ùå $message" --urgency=critical
        elif [[ "$message" == *"—É—Å–ø–µ—à–Ω–æ"* ]] || [[ "$message" == *"–∑–∞–≤–µ—Ä—à–µ–Ω"* ]]; then
            notify-send "Backup Manager" "‚úÖ $message"
        fi
    fi
}

detect_architecture() {
    case $(uname -m) in
        x86_64) echo "x86_64-unknown-linux-gnu" ;;
        aarch64|arm64) echo "aarch64-unknown-linux-gnu" ;;
        *) echo "unknown" ;;
    esac
}

check_rustic_installed() {
    if command -v rustic >/dev/null 2>&1; then
        log_message "Rustic –Ω–∞–π–¥–µ–Ω: $(rustic --version)"
        return 0
    else
        return 1
    fi
}

install_rustic() {
    local arch=$(detect_architecture)
    if [ "$arch" = "unknown" ]; then
        log_message "–û–®–ò–ë–ö–ê: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ $(uname -m)"
        return 1
    fi

    # Check for extracted binary first
    local installer_path="$INSTALLERS_DIR/rustic-$arch"

    # If not found, look for archive and extract
    if [ ! -f "$installer_path" ]; then
        local archive_path="$INSTALLERS_DIR/rustic-v0.9.5-$arch.tar.gz"

        if [ -f "$archive_path" ]; then
            log_message "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ rustic –∏–∑ –∞—Ä—Ö–∏–≤–∞..."
            local temp_dir=$(mktemp -d)
            tar -xzf "$archive_path" -C "$temp_dir"

            if [ -f "$temp_dir/rustic" ]; then
                cp "$temp_dir/rustic" "$installer_path"
                chmod +x "$installer_path"
                rm -rf "$temp_dir"
            else
                log_message "–û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω –±–∏–Ω–∞—Ä–Ω–∏–∫ –≤ –∞—Ä—Ö–∏–≤–µ"
                rm -rf "$temp_dir"
                return 1
            fi
        else
            log_message "–û–®–ò–ë–ö–ê: –£—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: $installer_path"
            log_message "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./download_rustic.sh"
            return 1
        fi
    fi

    log_message "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º rustic –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞..."

    mkdir -p "$HOME/.local/bin"
    cp "$installer_path" "$HOME/.local/bin/rustic"
    chmod +x "$HOME/.local/bin/rustic"

    if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
        echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$HOME/.bashrc"
        export PATH="$HOME/.local/bin:$PATH"
    fi

    if "$HOME/.local/bin/rustic" --version >/dev/null 2>&1; then
        log_message "Rustic —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 0
    else
        log_message "–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å rustic"
        return 1
    fi
}

calculate_checksum() {
    local dir_path="$1"
    if [ "$ENABLE_CHECKSUM_VERIFICATION" != "true" ]; then
        echo "checksum_disabled"
        return 0
    fi

    if [ -d "$dir_path" ] && [ -r "$dir_path" ]; then
        find "$dir_path" -type f -exec stat --format='%n %s %Y' {} + | sort | md5sum | cut -d' ' -f1
    else
        echo ""
    fi
}

is_source_safe() {
    local dir_path="$1"

    if [ ! -d "$dir_path" ] || [ ! -r "$dir_path" ]; then
        log_message "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '$dir_path' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        return 1
    fi

    if [ ! "$(ls -A "$dir_path")" ]; then
        log_message "–ò–ù–§–û: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '$dir_path' –ø—É—Å—Ç–∞"
        return 0
    fi

    if [ "$ENABLE_SIZE_CHECK" = "true" ]; then
        local total_size_kb=$(du -sk "$dir_path" | cut -f1)

        if ! [[ "$total_size_kb" =~ ^[0-9]+$ ]] || [ "$total_size_kb" -lt "$MIN_TOTAL_DIR_SIZE_KB" ]; then
            log_message "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –†–∞–∑–º–µ—Ä '$dir_path' (${total_size_kb}KB) –º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–∞"
            return 1
        fi
    fi

    return 0
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
show_menu() {
    echo ""
    echo "=========================================="
    echo "        –ú–ï–ù–ï–î–ñ–ï–† –ë–≠–ö–ê–ü–û–í RUSTIC"
    echo "=========================================="
    echo "1) –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫–∞–ø"
    echo "2) –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—ç–∫–∞–ø–∞—Ö"
    echo "3) –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞"
    echo "4) üóÑÔ∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏"
    echo "5) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
    echo "6) –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
    echo "7) üìÖ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    echo "8) –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
    echo "9) ‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ (systemd)"
    echo "0) –í—ã—Ö–æ–¥"
    echo "=========================================="
}

# --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ---
main() {
    check_dependencies
    load_config

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    case "${1:-menu}" in
        "backup"|"run")
            run_backup
            ;;
        "info")
            show_config_summary
            show_backup_info
            ;;
        "restore")
            interactive_restore
            ;;
        "check")
            validate_config
            ;;
        "menu"|"")
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
            while true; do
                show_menu
                read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-9): " choice

                case $choice in
                    1) run_backup ;;
                    2) show_backup_info ;;
                    3) interactive_restore ;;
                    4) manage_repositories ;;
                    5) validate_config ;;
                    6) show_config_summary ;;
                    7) show_schedule_info ;;
                    8) ${EDITOR:-nano} "$CONFIG_FILE" ;;
                    9) "$SCRIPT_DIR/setup_systemd.sh" install ;;
                    0) echo "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"; exit 0 ;;
                    *) echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä" ;;
                esac

                echo ""
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
            done
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [backup|info|restore|check|menu]"
            exit 1
            ;;
    esac
}

run_backup() {
    log_message "=== –ê–í–¢–û–ù–û–ú–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† –ë–≠–ö–ê–ü–û–í –° RUSTIC ==="

    if ! validate_config; then
        exit 1
    fi

    show_config_summary

    # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    log_message "DEBUG: –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –±—ç–∫–∞–ø–æ–º"

    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if [ "${TEST_WITHOUT_EXCLUSIONS:-false}" = "true" ]; then
        log_message "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—ç–∫–∞–ø –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ë–ï–ó –∏—Å–∫–ª—é—á–µ–Ω–∏–π (TEST_WITHOUT_EXCLUSIONS=true)"
        export DISABLE_EXCLUSIONS=true
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º rustic
    if ! check_rustic_installed; then
        if ! install_rustic; then
            log_message "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å rustic"
            exit 1
        fi
    fi

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    log_message "DEBUG: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π..."
    EXCLUDE_FILE=$(generate_exclude_file)

    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    mkdir -p "$STATE_DIR" "$(dirname "$LOG_FILE")" "$CREDENTIALS_DIR"

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±—ç–∫–∞–ø–∞
    TIMESTAMP=$(date +'%Y%m%d_%H%M%S')
    CHANGED_DIRS=()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    for source_dir in "${SOURCE_DIRS[@]}"; do
        if [ ! -d "$source_dir" ]; then
            log_message "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '$source_dir' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            continue
        fi

        dest_name=$(basename "$source_dir")
        state_file="${STATE_DIR}/${dest_name}.state"

        current_checksum=$(calculate_checksum "$source_dir")
        previous_checksum=""
        [ -f "$state_file" ] && previous_checksum=$(cat "$state_file")

        if [ "$current_checksum" != "$previous_checksum" ]; then
            if is_source_safe "$source_dir"; then
                log_message "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ '$source_dir' - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±—ç–∫–∞–ø"
                CHANGED_DIRS+=("$source_dir")
            fi
        fi
    done

    # –í—ã–ø–æ–ª–Ω—è–µ–º –±—ç–∫–∞–ø –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if [ ${#CHANGED_DIRS[@]} -gt 0 ]; then
        local config_json=$(envsubst < "$CONFIG_FILE")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å repositories
        if echo "$config_json" | jq -e '.repositories' >/dev/null 2>&1; then
            # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
            local multi_repo_enabled=$(echo "$config_json" | jq -r '.multi_repo.enabled // false')

            if [ "$multi_repo_enabled" = "true" ]; then
                log_message "–†–µ–∂–∏–º –º—É–ª—å—Ç–∏-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤–∫–ª—é—á–µ–Ω"

                local target_repos=$(echo "$config_json" | jq -r '.multi_repo.repositories[]' 2>/dev/null || get_enabled_repositories "$config_json")
                local successful_repos=()
                local failed_repos=()

                if [ "$PARALLEL_UPLOADS" = "true" ]; then
                    log_message "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã"

                    # –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è PID –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                    local pids=()

                    for repo_name in $target_repos; do
                        local repo_enabled=$(echo "$config_json" | jq -r ".repositories.$repo_name.enabled // false")

                        if [ "$repo_enabled" = "true" ]; then
                            log_message "–ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –≤ '$repo_name'"

                            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
                            (
                                if backup_to_repository "$repo_name" "$config_json" "${CHANGED_DIRS[@]}"; then
                                    echo "SUCCESS:$repo_name" > "/tmp/backup_result_$$_$repo_name"
                                else
                                    echo "FAILED:$repo_name" > "/tmp/backup_result_$$_$repo_name"
                                fi
                            ) &

                            pids+=($!)
                        fi
                    done

                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                    log_message "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤..."
                    for pid in "${pids[@]}"; do
                        wait "$pid"
                    done

                    # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    for repo_name in $target_repos; do
                        if [ -f "/tmp/backup_result_$$_$repo_name" ]; then
                            local result=$(cat "/tmp/backup_result_$$_$repo_name")
                            if [[ "$result" == "SUCCESS:"* ]]; then
                                successful_repos+=("$repo_name")
                            else
                                failed_repos+=("$repo_name")
                            fi
                            rm -f "/tmp/backup_result_$$_$repo_name"
                        fi
                    done

                else
                    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    log_message "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏"

                    for repo_name in $target_repos; do
                        local repo_enabled=$(echo "$config_json" | jq -r ".repositories.$repo_name.enabled // false")

                        if [ "$repo_enabled" = "true" ]; then
                            if backup_to_repository "$repo_name" "$config_json" "${CHANGED_DIRS[@]}"; then
                                successful_repos+=("$repo_name")
                            else
                                failed_repos+=("$repo_name")
                            fi
                        fi
                    done
                fi

                log_message "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: —É—Å–ø–µ—à–Ω–æ=${#successful_repos[@]}, –æ—à–∏–±–æ–∫=${#failed_repos[@]}"
            else
                # –û–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Ä–µ–∂–∏–º (–Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
                local primary_repo=$(get_primary_repository "$config_json")
                backup_to_repository "$primary_repo" "$config_json" "${CHANGED_DIRS[@]}"
            fi
        else
            # –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            log_message "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –¥–ª—è ${#CHANGED_DIRS[@]} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º password file –¥–ª—è —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            local password_file="$SCRIPT_DIR/.password"

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if [ ! -d "$RUSTIC_REPO" ]; then
                log_message "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è rustic —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."

                if [ ! -f "$password_file" ]; then
                    openssl rand -base64 32 > "$password_file"
                    chmod 600 "$password_file"
                fi

                rustic init --repository "$RUSTIC_REPO" --password-file "$password_file"
            fi

            # –í—ã–ø–æ–ª–Ω—è–µ–º –±—ç–∫–∞–ø (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            log_message "DEBUG: –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –±—ç–∫–∞–ø –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: ${CHANGED_DIRS[*]}"
            local exclude_file=$(generate_exclude_file)
            log_message "DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–π: $exclude_file"

            rustic backup "${CHANGED_DIRS[@]}" \
                --repository "$RUSTIC_REPO" \
                --password-file "$password_file" \
                --tag "auto-$TIMESTAMP" \
                --custom-ignorefile "$exclude_file" \
                --set-compression "$RUSTIC_COMPRESSION"

            if [ $? -eq 0 ]; then
                log_message "–ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω"

                # –†–æ—Ç–∞—Ü–∏—è
                rustic forget \
                    --repository "$RUSTIC_REPO" \
                    --password-file "$password_file" \
                    --keep-daily "$KEEP_DAILY" \
                    --keep-weekly "$KEEP_WEEKLY" \
                    --keep-monthly "$KEEP_MONTHLY" \
                    --keep-yearly "$KEEP_YEARLY" \
                    --prune
            else
                log_message "–û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞"
            fi
        fi

        # –û–±–Ω–æ–≤–ª—è–µ–º state —Ñ–∞–π–ª—ã –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –±—ç–∫–∞–ø–µ
        for source_dir in "${CHANGED_DIRS[@]}"; do
            dest_name=$(basename "$source_dir")
            state_file="${STATE_DIR}/${dest_name}.state"
            current_checksum=$(calculate_checksum "$source_dir")
            echo "$current_checksum" > "$state_file"
        done
    else
        log_message "–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - –±—ç–∫–∞–ø –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
    fi

    log_message "–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É"
}

# –ó–∞–ø—É—Å–∫
main "$@"
